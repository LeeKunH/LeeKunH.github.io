---
layout : post
title : cmd-터미널-콘솔-커맨드라인-셀
tags:
  - 개발용어_CS지식
aliases:
  - Command Prompt
  - Terminal
  - Console
  - CLI
  - GUI
  - shell
  - 명령프롬프트
---
### 날짜 2023-10-28 23:31

# 주제-키워드 =>



---
# 연관된 기록 =>
위에서 작성한 내용과 연관성이 있는 기록-노트를 연결.
" [[]] "
- 


-------------------------------
- ### 3회 기록/영구노트 기록 단계 =>
	ㅡ 이 기록을 왜 시작하게 되었는지 생각.
	ㅡ "나무가 되는 폴더"를 생성하고 "목차-기록"에 작은 기록들을 연결시킨다.
	- <span style="background:rgba(240, 200, 0, 0.2)">키워드/문장 기록 =></span>
	ㅡ 2회 기록단계에서 기록한 키워드 요약들을 연결시킨다



-----------------
- ### 2회 기록/참고노트/복습-목차요약 단계 =>
	1회독 기록 노트 기반
	복습 및 키워드 요약 단계

- CMD (Command Prompt)
- 터미널 (Terminal)
- 콘솔 (Console)
- 프로그램 실행 원리
	- CLI
	- GUI
		- 인터페이스 용어


---
- ### 1회독 기록/임시노트/본문 내용 =>
	전체적인 내용 기록

ㅡ
"CMD," "터미널," "콘솔"은 기본적으로 명령어를 실행하고 시스템과 상호 작용하는 텍스트 기반의 환경을 의미
	
이 용어들은 주로 사용되는 운영 체제나 환경에 따라 다르게 불림. 용어의 차이는 주로 운영 체제와 관련이 있으며, 각각은 해당 운영 체제의 명령어 인터페이스를 지칭
	ㅡ
	명령어를 칠 수 있는 공간, 창, 프로그램 느낌
# 1. **CMD (Command Prompt)** = 명령 프롬프트

ㅡ
이 용어는 주로 Windows 운영 체제에서 사용
	
ㅡ
컴퓨터 <> cmd <> 사용자
즉, 컴퓨터와 사용자 사이에 위치하면서 사용자가 컴퓨터에서 운영체제 기능을 실행하고 사용하기 위해 명령어_코드를 입력하는 곳이라 생각
	
좀 더 정확한 표현으로는 "명령 프롬프트는 컴퓨터에서 명령어를 입력하고 실행하는 데 사용되는 텍스트 기반 인터페이스입니다."
	
Windows 운영 체제에서 사용되며, 명령어를 입력하여 파일 및 디렉터리 관리, 시스템 설정 변경, 프로그램 실행 등을 수행할 수 있습


ㅡ
cmd 업그레이드 > Windows PowerShell


# 2. **터미널 (Terminal)**
이 용어는 주로 Unix 및 Unix 기반 운영 체제 (예: Linux, macOS)에서 사용
	
"커맨드 라인" 또는 "콘솔"이라고도 불립

# 3. **콘솔 (Console)**
이 용어는 컴퓨터 기술 전반에 사용되며, 일반적으로 텍스트 또는 그래픽 사용자 인터페이스를 의미
	
콘솔은 입력과 출력을 다루는 장치 또는 환경을 가리킬 수 있습니다.
	=>
	즉 "콘솔" 용어는 2가지 의미를 가짐.
	1. 장치 2. 가상환경

- **콘솔**
은 ==프로그램의 실행 환경_프로그램을 의미==하고, **콘솔 창**은 그 ==프로그램과 사용자가 상호작용할 수 있는 인터페이스 창==을 말합니다. ==콘솔 창==은 콘솔을 포함하여 ==다양한 프로그램을 실행==하고, 
	= ==사용자와 컴퓨터_내부_프로그램 간의 상호작용을 중계하는 역할==을 수행합니다.
	
사용자는 ==콘솔을 통해 명령어를 입력==하고, ==해당 명령어에 따라 컴퓨터가 작업을 수행==하며, ==결과를 텍스트로 반환==합니다. 즉, 콘솔은 사용자와 컴퓨터 간의 상호작용을 중개하는 가상환경이라고 볼 수 있습니다.
	
> [!NOTE]
> 	=>
> 	정리하면
> 	콘솔 프로그램 존재
> 	콘솔 가상환경 존재
> 	콘솔 입력_실행 결과를 보여주는 창을 콘솔창. 
> 		또 다른 표현으로 인터페이스창

- 콘솔 창
ㅡ 굳이 비유를 하면
프로그램 <> 가상환경 <> 사용자 느낌
	
즉 콘솔 창은 가상환경의 결과를 사용자에게 보여주는 역할임


-----
### ㅡ 용어 사용 예시 상황

ㅡ "**커맨드 라인**에서 Git 명령어를 사용하여 Git 기능을 실행하는 것"
	
이것이 가능한 이유는 Git이 커맨드 라인 환경에서 사용할 수 있는 **명령어 기반의 도구**를 제공하기 때문입니다. 
	
Git은 그래픽 사용자 인터페이스**(GUI)** 뿐만 아니라 **커맨드 라인 인터페이스(CLI)** 도 지원하며, 사용자는 터미널(또는 CMD)을 통해 Git 명령어를 입력해 깃 프로그램을 실행하고 기능을 사용할 수  있다.

ㅡ MySQL 
콘솔창에서 MySQL이 제대로 설치 되었는지 확인 가능
: `mysql -u root -p` 명령어 > 비밀번호 입력 
	
서로 다른 프로그램끼리 상호작용 중
	인터페이스!

------
### ㅡ 프로그램 실행 원리

###### ㅡ 인터페이스 용어
는 다른 요소(프로그램이든 뭐든)와 상호작용하기 위한 방법을 제공하는데 사용되는 개념
	
인터페이스 용어를 이해했다면 "그래픽 유저 인터페이스" 용어를 더 잘 이해 가능
	
EX) 
	프로그램 <> 사용자
	서로 다른 요소가 상호작용 한다.
		= 사용자가 프로그램을 사용한다.
	이러한 상황이 인터페이스 상황? 임

-----
##### ㅡ CLI - 커맨드 라인 인터페이스
##### ㅡ GUI - 그래픽 유저 인터페이스
ㅡ
사용자가 컴퓨터에서 프로그램을 실행하려면 해당 프로그램은 CLI 또는 GUI 중 하나 이상을 제공해야 합
	
CLI는 명령어를 통해 프로그램을 조작
고급 사용자나 자동화 작업에 유용
	
> [!NOTE]
> 	=>
> 	검은색 화면에 명령 코드로 프로그램을 실행하는 모습 생각
	
GUI는 그래픽 사용자 인터페이스를 통해 프로그램을 시각적으로 다룹니다.
	ㅡ
	"프로그램이 GUI를 제공한다" 라는 의미는 해당 프로그램의 실행, 기능을 마우스_더블 클릭을 이용해 사용할 수 있는 인터페이스_창을 의미함. 
	
=>
따라서 사용자가 다운받은 프로그램을 사용하기 위해선 CLI 또는 GUI 중 하나를 사용하여 프로그램을 실행하고 조작할 수 있으며, 프로그램이 이러한 인터페이스 중 하나 이상을 제공하지 않는다면 사용자는 해당 프로그램을 사용할 수 없습니다.




ㅡ
CLI는 주로 자동화, 스크립팅, 원격 작업, **서버 관리** 등을 위해 사용

---
# 출처-참고자료=>
- 
